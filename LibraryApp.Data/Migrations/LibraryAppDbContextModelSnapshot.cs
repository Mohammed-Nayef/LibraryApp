// <auto-generated />
using System;
using LibraryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Data.Migrations
{
    [DbContext(typeof(LibraryAppDbContext))]
    partial class LibraryAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateOnly(1990, 1, 1),
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1178),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            LastUpdatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1179),
                            PasswordHash = "hashedpassword1",
                            PhoneNumber = "+123456789",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateOnly(1985, 6, 15),
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1185),
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            LastUpdatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1186),
                            PasswordHash = "hashedpassword2",
                            PhoneNumber = "+987654321",
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateOnly(1982, 10, 20),
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1190),
                            Email = "aliceauthor@example.com",
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Johnson",
                            LastUpdatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1190),
                            PasswordHash = "hashedpassword3",
                            PhoneNumber = "+192837465",
                            Role = "Author"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 3
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1804),
                            Description = "An advanced guide to C# programming.",
                            PublishedDate = new DateOnly(2019, 3, 12),
                            SubcategoryId = 1,
                            Title = "Mastering C#"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1811),
                            Description = "A practical guide to building web applications using ASP.NET Core.",
                            PublishedDate = new DateOnly(2020, 7, 25),
                            SubcategoryId = 2,
                            Title = "ASP.NET Core in Action"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.BookBorrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookBorrows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1894),
                            CustomerId = 1,
                            ExpiryDate = new DateTime(2024, 11, 7, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1895)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1902),
                            CustomerId = 1,
                            ExpiryDate = new DateTime(2024, 11, 7, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1903)
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.BookTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            TagId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Books related to programming languages and software development.",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Novels and stories that are imaginative and not based on real events.",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Books that are factual and based on real events and information.",
                            Name = "Non-Fiction"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 2,
                            Title = "Library Manager"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "C# Programming"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Name = "Biography"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1672),
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1675),
                            Name = "ASP.NET"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1678),
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1680),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 24, 8, 0, 57, 17, DateTimeKind.Utc).AddTicks(1683),
                            Name = "Biography"
                        });
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Author", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.AppUser", "AppUser")
                        .WithOne("Author")
                        .HasForeignKey("LibraryApp.Domain.Models.Author", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Book", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Domain.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Domain.Models.Subcategory", "Subcategory")
                        .WithMany("Books")
                        .HasForeignKey("SubcategoryId")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.BookBorrow", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.Book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .IsRequired();

                    b.HasOne("LibraryApp.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.BookTag", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.Book", null)
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Domain.Models.Tag", null)
                        .WithMany("BookTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Customer", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("LibraryApp.Domain.Models.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Employee", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("LibraryApp.Domain.Models.Employee", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Subcategory", b =>
                {
                    b.HasOne("LibraryApp.Domain.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Book", b =>
                {
                    b.Navigation("BookTags");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Subcategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryApp.Domain.Models.Tag", b =>
                {
                    b.Navigation("BookTags");
                });
#pragma warning restore 612, 618
        }
    }
}
